version: '3.7'

# define secrets (we will override the dummy values in the swarm)
secrets:
    mysql-root:
        file: secrets/mysqlrootpassword.txt
    smtp-server:
        file: secrets/smtpserver.txt
    smtp-user:
        file: secrets/smtpuser.txt
    smtp-password:
        file: secrets/smtppassword.txt

# define services (we pass .env to have the same environment vars inside the compose file as in the containers
services:

  reverse-proxy:
    # Based on the official v2 Traefik docker image
    image: reverse-proxy
    # Enables the web UI and tells Traefik to listen to docker
    command:
      - --log.level=DEBUG
      - --api.insecure=true
      - --providers.docker
    #  - --log.level=INFO
      - --entryPoints.websecure.address=:443
      - --providers.file.directory=/opt/traefik/certs
    networks:
      - appnetwork
    ports:
      # The HTTP port
      - "443:443"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
    build:
      context: .
      dockerfile: reverse-proxy/Dockerfile
    restart: on-failure

  dbserver_entity:
    image: dbserver_entity
    # no exposed ports
    networks:
      - appnetwork
    # use a secret (and the database name is just passed on from the .env file)
    environment:
      - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/mysql-root
    env_file: .env
    # give access to a secret
    secrets:
      - mysql-root
    volumes:
      - "data:/var/lib/mysql"
    restart: on-failure
    build:
      context: .
      dockerfile: dbserver_entity/Dockerfile
    labels:
      - "traefik.enable=false"

  objectstore:
    image: objectstore
    # no outward exposed ports, traefik will deal with that
    #ports:
    #  - 5555:5555
    networks:
      - appnetwork
    # use a secret (and the database name is just passed on from the .env file)
    environment:
      - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/mysql-root
    env_file: .env
    # give access to a secret
    secrets:
      - mysql-root
    depends_on:
      - dbserver_entity
    restart: on-failure
    build:
      context: .
      dockerfile: objectstore/Dockerfile
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.objectstore.entrypoints=websecure"
      - "traefik.http.routers.objectstore.tls=true"
      - "traefik.http.routers.objectstore.rule=Host(`server.michelanders.nl`) && PathPrefix(`/objects`)"
      - "traefik.backend=objectstore"
      - "traefik.http.routers.objectstore.middlewares=objectprefix"
      - "traefik.http.middlewares.objectprefix.stripprefix.prefixes=/objects"
      - "traefik.http.services.objectstore.loadbalancer.server.port=5555"
    # in compose mode we should use dockerplayground_appnetwork by we need not specify it because all machines are on the same net as traefik
    #  - "traefik.docker.network=appnetwork"

  crudapp:
    image: crudapp
    # no outward exposed ports, traefik will deal with that
    #ports:
    #  - 8000:8000
    networks:
      - appnetwork
    depends_on:
      - objectstore
    restart: on-failure
    build:
      context: .
      dockerfile: crudapp/Dockerfile
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.crudapp.entrypoints=websecure"
      - "traefik.http.routers.crudapp.tls=true"
      - "traefik.http.routers.crudapp.rule=Host(`server.michelanders.nl`) && PathPrefix(`/books`)"
      - "traefik.backend=crudapp"
      - "traefik.http.routers.crudapp.middlewares=test-ratelimit,bookprefix"
      - "traefik.http.middlewares.bookprefix.stripprefix.prefixes=/books"
      - "traefik.http.services.crudapp.loadbalancer.server.port=8000"
    # in compose mode we should use dockerplayground_appnetwork by we need not specify it because all machines are on the same net as traefik
      - "traefik.docker.network=dockerplayground_appnetwork"
      - "traefik.http.middlewares.test-ratelimit.ratelimit.average=1000"
      - "traefik.http.middlewares.test-ratelimit.ratelimit.burst=5000"

  authserver:
    image: authserver
    # no outward exposed ports, traefik will deal with that
    #ports:
    #  - 8005:8005
    networks:
      - appnetwork
    environment: # if environment variables are set they override the files
      - SMTP_SERVER
      - SMTP_USER
      - SMTP_PASSWORD
      - SMTP_SERVER_FILE=/run/secrets/smtp-server
      - SMTP_USER_FILE=/run/secrets/smtp-user
      - SMTP_PASSWORD_FILE=/run/secrets/smtp-password
    env_file: .env
    secrets:
      - smtp-server
      - smtp-user
      - smtp-password
    volumes:
      - "userdata:/var/lib/sqlite"
    restart: on-failure
    build:
      context: .
      dockerfile: authserver/Dockerfile
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.authserver.entrypoints=websecure"
      - "traefik.http.routers.authserver.tls=true"
      - "traefik.http.routers.authserver.rule=Host(`server.michelanders.nl`) && PathPrefix(`/auth`)"
      - "traefik.backend=authserver"
      - "traefik.http.routers.authserver.middlewares=authprefix"
      - "traefik.http.middlewares.authprefix.stripprefix.prefixes=/auth"
      - "traefik.http.services.authserver.loadbalancer.server.port=8005"

networks:
  appnetwork:

volumes:
    data:
    userdata:
