#!/bin/bash

# switch to same directory as this script
cd "${0%/*}"

export DOMAIN=127.0.0.1
export APPLICATION=/dummy
export LOGINSCREEN=/dummy/loginscreen
# next two are relative (point to the same server)
export CONFIRMREGISTRATION=confirmregistration
export RESETPASSWORD=resetpassword

export DATABASE=user.db
export ADMIN_USER=test@example.org
export ADMIN_PASSWORD=s3Cret!!

# these are designed to fail: we don't send mail actually
export SMTP_USER=user
export SMTP_PASSWORD=secret
export SMTP_SERVER=192.168.66.66

export DEBUGLEVEL=DEBUG

export SESSION=./mysession
export RESPONSE=./myresponse
export SERVERLOG=./logfile

export COVERAGE_PROCESS_START="$PWD"/.coveragerc
rm -f .coverage .coverage.*

PYTHONPATH=src pytest > unittest_report.txt
if [ $? -eq 0 ]
then
  echo "unit tests                    : pass"
else
  echo "unit tests                    : fail"
fi

echo functional tests

http="http --ignore-stdin --timeout=5"
# make sure we always terminate the server
set -e
clean_up () {
    ARG=$?
    echo
    echo "atexit: removing server if still present"
    kill %1
    exit $ARG
}
trap clean_up EXIT

# start the server in the background and make sure it has a bit of time to startup
echo starting the server
rm -f $DATABASE $SESSION $RESPONSE

PYTHONPATH=src python -m authserver -d $DATABASE > $SERVERLOG 2>&1 &
sleep 2

unset COVERAGE_PROCESS_START

# perform the functional tests
python functional_tests_authserver.py

# perform some test for which we need to retrieve information from the server log
$http -ph -f POST localhost:8005/login email=testuser@example.org password=$ADMIN_PASSWORD password2=$ADMIN_PASSWORD name=Testuser login=Register | grep '303 Registration pending confirmation, email sent to email address' > /dev/null
confirmid=`grep -oE 'confirmation id: [0-9a-f]{32}' $SERVERLOG|grep -oE '[0-9a-f]{32}'`
if [ $? -eq 0 ]
then
  echo "send registration             : pass"
else
  echo "send registration             : fail"
fi
$http -ph GET localhost:8005/confirmregistration?$confirmid  | grep '303 Confirmation ok' > /dev/null
if [ $? -eq 0 ]
then
  echo "registration confirmation     : pass"
else
  echo "registration confirmation     : fail"
fi
$http -ph GET localhost:8005/confirmregistration?deadbeefdeadbeefdeadbeefdeadbeef | grep '303 Confirmation link not ok' > /dev/null
if [ $? -eq 0 ]
then
  echo "illegal confirmation          : pass"
else
  echo "illegal confirmation          : fail"
fi
$http -ph -f POST localhost:8005/login email=testuser@example.org login=Forgot | grep '303 Email sent' > /dev/null
confirmid=`grep -oE 'reset confirmation id: [0-9a-f]{32}' $SERVERLOG|grep -oE '[0-9a-f]{32}'`
if [ $? -eq 0 ]
then
  echo "reset password sent           : pass"
else
  echo "reset password sent           : fail"
fi
$http -ph GET localhost:8005/resetpassword?$confirmid  > $RESPONSE
grep '303 Reset request ok' $RESPONSE > /dev/null
if [ $? -eq 0 ]
then
  echo "reset password confirmation   : pass"
else
  echo "reset password confirmation   : fail"
fi
$http -ph -f POST localhost:8005/newpassword email=testuser@example.org resetid=$confirmid password=$ADMIN_PASSWORD password2=$ADMIN_PASSWORD choose=Choose > $RESPONSE
grep '303 Password reset successful' $RESPONSE > /dev/null
if [ $? -eq 0 ]
then
  echo "reset password submit         : pass"
else
  echo "reset password submit         : fail"
fi


echo tests done, removing server
kill %1
sleep 1

echo generating coverage reports

coverage combine
coverage html
coverage report > coverage_report.txt

echo all done

