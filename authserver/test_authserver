#!/bin/bash

# switch to same directory as this script
cd "${0%/*}"

export DOMAIN=127.0.0.1
export APPLICATION=/dummy
export LOGINSCREEN=/dummy/loginscreen
# next two are relative (point to the same server)
export CONFIRMREGISTRATION=confirmregistration
export RESETPASSWORD=resetpassword

export DATABASE_FILE=user.db
export DATABASE_RETRIES=3
export DATABASE_BACKOFF=1
export ADMIN_USER=test@example.org
export ADMIN_PASSWORD=s3Cret!!

# these are designed to fail: we don't send mail actually
export SMTP_USER=user
export SMTP_PASSWORD=secret
export SMTP_SERVER=192.168.66.66

export DEBUGLEVEL=DEBUG
export FUNCTIONALDEBUGLEVEL=ERROR

export SESSION=./mysession
export RESPONSE=./myresponse
export SERVERLOG=./logfile

export PORT=8005

export COVERAGE_PROCESS_START="$PWD"/.coveragerc
rm -f .coverage .coverage.*

PYTHONPATH=src pytest > unittest_report.txt
if [ $? -eq 0 ]
then
  echo "unit tests                    : pass"
else
  echo "unit tests                    : fail"
fi

echo functional tests

# make sure we always terminate the server
set -e
clean_up () {
    ARG=$?
    echo
    echo "atexit: removing server if still present"
    kill %1
    exit $ARG
}
trap clean_up EXIT

# start the server in the background and make sure it has a bit of time to startup
echo starting the server
rm -f $DATABASE_FILE $SESSION $RESPONSE

PYTHONPATH=src gunicorn -b 0.0.0.0:$PORT "server:create_app()" --reuse-port  > $SERVERLOG 2>&1 &
sleep 2

unset COVERAGE_PROCESS_START

# perform the functional tests
python functional_tests_authserver.py
if [ $? -eq 0 ]
then
  echo "functional tests              : pass"
else
  echo "functional tests              : fail"
fi
echo tests done, removing server
kill %1
sleep 1

echo generating coverage reports

coverage combine
coverage html
coverage report > coverage_report.txt

echo all done

